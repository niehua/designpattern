设计模式的目标：提高程序的可复用性，及将程序作为组件使用。
   1、有哪些功能可以扩展
   2、扩展功能必须修改哪些地方
   3、有哪些地方不需要修改

    如果只是用具体的类来解决问题，很容易导致类之间的强耦合，这些类也难以作为组件被再次利用。
为了弱化类之间的耦合，进而使得类更加容易作为组件被再次利用，我们需要引进抽象类和接口。

谁知道什么？
    在面向对象中，“谁知道什么”是非常重要的。只有不知道子类才能替换，正是因为可以替换，组件才具有高价值

可见性：
       设计包时，考虑类的可见性，如果让外部看到了类，包内部代码的修改就会变得困难

继承是强关联方式。委托是若关联方式

开闭原则：对扩展开放，对修改关闭

